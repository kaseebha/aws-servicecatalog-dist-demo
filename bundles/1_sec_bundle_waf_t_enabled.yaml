AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This AWS CloudFormation template helps you provision the AWS WAF Bundle.

Parameters:
  AWSDistributorName:
    Type: String
    Default: AcmeCorp
    Description: Partner Name

  BundleName:
    Type: String
    Default: AWS_WAF_Bundle_lite
    Description: Name of the AWS bundle being deployed.

  WebACLName:
    Type: String
    Default: WebACL-WebApp1
    Description: Identify this Web ACL with a name (eg. webACL-customerName-webapp1)

  EndpointType:
    Type: String
    Default: REGIONAL
    AllowedValues:
      - 'CLOUDFRONT'
      - 'REGIONAL'
    Description: Select 'REGIONAL' for ALB/ELB/API Gateway endpoints and 'CLOUDFRONT' if Cloudfront is the endpoint.

  ActivateAWSManagedRulesParam:
    Type: String
    Default: yes
    AllowedValues:
      - yes
      - no
    Description: Choose yes to enable AWS Managed Rules

  ActivateReputationListsProtectionParam:
    Type: String
    Default: yes
    AllowedValues:
      - yes
      - no
    Description: >-
      Choose yes to block requests from IP addresses on third-party reputation lists (supported
      lists: spamhaus, torproject, and emerging threats).

  ReportingEnabled:
    Type: String
    Default: yes
    AllowedValues:
     - yes
     - no
    Description: Allow AWS to collect basic usage metrics about this deployment.

Conditions:
  AWSManagedCommonRulesActivated: !Equals [!Ref ActivateAWSManagedRulesParam, yes]
  ReputationListsProtectionActivated: !Equals [!Ref ActivateReputationListsProtectionParam, yes]
  isReportingEnabled: !Equals [!Ref ReportingEnabled, yes]

Resources:
  WAFWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Ref WebACLName
      Description: 'Custom WAFWebACL'
      Scope: !Ref EndpointType
      VisibilityConfig: 
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: WAFWebACLMetrics
      DefaultAction:
        Allow: {}
      Rules:
        - Fn::If:
          - AWSManagedCommonRulesActivated
          - Name: AWS-AWSManagedRulesCommonRuleSet
            Priority: 0
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: RuleWithAWSManagedRulesMetric
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesCommonRuleSet
          - Ref: AWS::NoValue

        - Fn::If:
          - ReputationListsProtectionActivated
          - Name: AWS-AWSManagedRulesAmazonIpReputationList
            Priority: 1
            OverrideAction:
              None: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: RuleWithAWSManagedRulesMetric
            Statement:
              ManagedRuleGroupStatement:
                VendorName: AWS
                Name: AWSManagedRulesAmazonIpReputationList
          - Ref: AWS::NoValue

  sendBundleStatsFunction:
    Type: AWS::Lambda::Function
    Condition: isReportingEnabled
    Properties:
      FunctionName: sendBundleStats
      Environment:
        Variables:
          REPORTING_URL: https://522pyxhzqqn2rf6gl2o2uikirm0lxcww.lambda-url.ap-south-1.on.aws/
      Code:
        ZipFile: |
          import boto3, json, urllib3, os
          import cfnresponse

          def handler(event, context):
            print(f"EVENT:{event}")
            print(f"EVENT_JSON: {json.dumps(event)}")
            
            #first send success for all CFT event types
            responseData = {}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            
            if event['RequestType'] == "Create":
              try:
                cf_data_json = json.dumps(event['ResourceProperties'])
                http = urllib3.PoolManager()
                response = http.request("POST", os.environ['REPORTING_URL'], headers={'Content-Type': 'application/json'}, body=cf_data_json)
                if response.status != 200:
                  print(f"Received response status: {response.status}")
              except Exception as e:
                print(e)

            return

      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: python3.9
      Timeout: 60

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Condition: isReportingEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: LambdaInvokePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - sts:GetCallerIdentity
            Resource: "*"

  sendDeployStatsEvent:
    Type: AWS::CloudFormation::CustomResource
    Condition: isReportingEnabled
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt sendBundleStatsFunction.Arn
      accountId: !Ref 'AWS::AccountId'
      bundleName: !Ref BundleName
      awsDistributorName: !Ref AWSDistributorName