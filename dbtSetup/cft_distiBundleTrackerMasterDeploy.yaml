AWSTemplateFormatVersion: 2010-09-09
Description: This AWS CloudFormation template deploys the AWS Distributor Bundle Tracker application

Parameters:
  CFNDatabaseName:
    Type: String
    Default: cfn-dbt-metrics-db
  CFNTableName1:
    Type: String
    Default: cfn-dbt-metrics-tbl
  CFT

Resources:
###
# S3 bucket to store reporting data
  ReportingBucket:
    Type : AWS::S3::Bucket

###
# Create an AWS Glue database
  DBTDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: Database to hold DBT metrics data

###
#Lambda to handle writing incoming data to S3
  LambdaTrackerFunction:
        Type: AWS::Lambda::Function
        Properties:
          FunctionName: DBTLaunchRegistrationLambda
          Environment:
            Variables:
              REPORTING_BUCKET_NAME: !Ref ReportingBucket
          Code:
            ZipFile: |
              import boto3, json, os, uuid
              from datetime import datetime

              def handler(event, context):

                  #store the message received from the customer account Lambda POST
                  post_body = json.loads(event["body"])

                  try:
                      responseData = {}
                      responseData['bundle_deploy_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                      responseData['account_id'] = post_body['accountId']
                      responseData['bundle_name'] = post_body['bundleName']
                      responseData['aws_distributor_name'] = post_body['awsDistributorName']

                      bucket_name = os.environ['REPORTING_BUCKET_NAME']
                      file_name = str(uuid.uuid4()) + ".json"
                      lambda_file_path = "/tmp/"+file_name
                      with open(lambda_file_path, 'w') as json_f:
                        json.dump(responseData, json_f)
                        #json_f.write(responseDataJson)
                          
                      #copy file to s3 and return success
                      s3 = boto3.resource("s3")
                      s3.meta.client.upload_file(lambda_file_path, bucket_name, file_name)
                      
                      return {
                        'statusCode': 200,
                        'body': json.dumps('dbt report generated:'+file_name)
                      }

                  except Exception as e: 
                      print("Unable to log deployment details...")
                      print(e)
                      
          Handler: index.handler
          Role: !GetAtt LambdaFunctionRole.Arn
          Runtime: python3.9
          Timeout: 60

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: LambdaInvokePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - sts:GetCallerIdentity
            Resource: "*"
      - PolicyName: LambdaS3ReportingBucketPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObjectAcl
            - s3:GetObject
            Resource: !Sub arn:aws:s3:::${ReportingBucket}/*
          - Effect: Allow
            Action:
            - s3-object-lambda:*
            Resource: "*"

Outputs:
  S3ReportingBucket:
    Description: S3 bucket to store incoming data on bundle launches
    Value: !Ref ReportingBucket
  
  GlueDatabase:
    Description: Glue database to store the processed incoming data
    Value: !Ref DBTGlueDatabase